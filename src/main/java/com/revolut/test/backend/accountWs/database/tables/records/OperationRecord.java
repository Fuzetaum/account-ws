/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.accountWs.database.tables.records;


import com.revolut.test.backend.accountWs.database.tables.Operation;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperationRecord extends UpdatableRecordImpl<OperationRecord> implements Record5<Integer, String, Timestamp, Integer, Byte> {

    private static final long serialVersionUID = 1904682294;

    /**
     * Setter for <code>operation.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>operation.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>operation.account_id</code>.
     */
    public void setAccountId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>operation.account_id</code>.
     */
    public String getAccountId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>operation.processing_date</code>.
     */
    public void setProcessingDate(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>operation.processing_date</code>.
     */
    public Timestamp getProcessingDate() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>operation.amount</code>.
     */
    public void setAmount(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>operation.amount</code>.
     */
    public Integer getAmount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>operation.is_withdraw</code>.
     */
    public void setIsWithdraw(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>operation.is_withdraw</code>.
     */
    public Byte getIsWithdraw() {
        return (Byte) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Timestamp, Integer, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, Timestamp, Integer, Byte> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Operation.OPERATION.ID;
    }

    @Override
    public Field<String> field2() {
        return Operation.OPERATION.ACCOUNT_ID;
    }

    @Override
    public Field<Timestamp> field3() {
        return Operation.OPERATION.PROCESSING_DATE;
    }

    @Override
    public Field<Integer> field4() {
        return Operation.OPERATION.AMOUNT;
    }

    @Override
    public Field<Byte> field5() {
        return Operation.OPERATION.IS_WITHDRAW;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAccountId();
    }

    @Override
    public Timestamp component3() {
        return getProcessingDate();
    }

    @Override
    public Integer component4() {
        return getAmount();
    }

    @Override
    public Byte component5() {
        return getIsWithdraw();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAccountId();
    }

    @Override
    public Timestamp value3() {
        return getProcessingDate();
    }

    @Override
    public Integer value4() {
        return getAmount();
    }

    @Override
    public Byte value5() {
        return getIsWithdraw();
    }

    @Override
    public OperationRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public OperationRecord value2(String value) {
        setAccountId(value);
        return this;
    }

    @Override
    public OperationRecord value3(Timestamp value) {
        setProcessingDate(value);
        return this;
    }

    @Override
    public OperationRecord value4(Integer value) {
        setAmount(value);
        return this;
    }

    @Override
    public OperationRecord value5(Byte value) {
        setIsWithdraw(value);
        return this;
    }

    @Override
    public OperationRecord values(Integer value1, String value2, Timestamp value3, Integer value4, Byte value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OperationRecord
     */
    public OperationRecord() {
        super(Operation.OPERATION);
    }

    /**
     * Create a detached, initialised OperationRecord
     */
    public OperationRecord(Integer id, String accountId, Timestamp processingDate, Integer amount, Byte isWithdraw) {
        super(Operation.OPERATION);

        set(0, id);
        set(1, accountId);
        set(2, processingDate);
        set(3, amount);
        set(4, isWithdraw);
    }
}
