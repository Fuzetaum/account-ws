/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.accountWs.database.tables.daos;


import com.revolut.test.backend.accountWs.database.tables.Account;
import com.revolut.test.backend.accountWs.database.tables.records.AccountRecord;

import java.sql.Date;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountDao extends DAOImpl<AccountRecord, com.revolut.test.backend.accountWs.database.tables.pojos.Account, String> {

    /**
     * Create a new AccountDao without any configuration
     */
    public AccountDao() {
        super(Account.ACCOUNT, com.revolut.test.backend.accountWs.database.tables.pojos.Account.class);
    }

    /**
     * Create a new AccountDao with an attached configuration
     */
    public AccountDao(Configuration configuration) {
        super(Account.ACCOUNT, com.revolut.test.backend.accountWs.database.tables.pojos.Account.class, configuration);
    }

    @Override
    public String getId(com.revolut.test.backend.accountWs.database.tables.pojos.Account object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Account.ACCOUNT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchById(String... values) {
        return fetch(Account.ACCOUNT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.revolut.test.backend.accountWs.database.tables.pojos.Account fetchOneById(String value) {
        return fetchOne(Account.ACCOUNT.ID, value);
    }

    /**
     * Fetch records that have <code>owner_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchRangeOfOwnerName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Account.ACCOUNT.OWNER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>owner_name IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchByOwnerName(String... values) {
        return fetch(Account.ACCOUNT.OWNER_NAME, values);
    }

    /**
     * Fetch records that have <code>currency BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchRangeOfCurrency(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(Account.ACCOUNT.CURRENCY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>currency IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchByCurrency(UInteger... values) {
        return fetch(Account.ACCOUNT.CURRENCY, values);
    }

    /**
     * Fetch records that have <code>balance BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchRangeOfBalance(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Account.ACCOUNT.BALANCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>balance IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchByBalance(Integer... values) {
        return fetch(Account.ACCOUNT.BALANCE, values);
    }

    /**
     * Fetch records that have <code>balance_last_update BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchRangeOfBalanceLastUpdate(Date lowerInclusive, Date upperInclusive) {
        return fetchRange(Account.ACCOUNT.BALANCE_LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>balance_last_update IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Account> fetchByBalanceLastUpdate(Date... values) {
        return fetch(Account.ACCOUNT.BALANCE_LAST_UPDATE, values);
    }
}
