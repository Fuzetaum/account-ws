/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.accountWs.database.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Operation implements Serializable {

    private static final long serialVersionUID = 914483545;

    private Integer   id;
    private String    accountId;
    private Timestamp processingDate;
    private Integer   amount;
    private Byte      isWithdraw;

    public Operation() {}

    public Operation(Operation value) {
        this.id = value.id;
        this.accountId = value.accountId;
        this.processingDate = value.processingDate;
        this.amount = value.amount;
        this.isWithdraw = value.isWithdraw;
    }

    public Operation(
        Integer   id,
        String    accountId,
        Timestamp processingDate,
        Integer   amount,
        Byte      isWithdraw
    ) {
        this.id = id;
        this.accountId = accountId;
        this.processingDate = processingDate;
        this.amount = amount;
        this.isWithdraw = isWithdraw;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getAccountId() {
        return this.accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public Timestamp getProcessingDate() {
        return this.processingDate;
    }

    public void setProcessingDate(Timestamp processingDate) {
        this.processingDate = processingDate;
    }

    public Integer getAmount() {
        return this.amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    public Byte getIsWithdraw() {
        return this.isWithdraw;
    }

    public void setIsWithdraw(Byte isWithdraw) {
        this.isWithdraw = isWithdraw;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Operation (");

        sb.append(id);
        sb.append(", ").append(accountId);
        sb.append(", ").append(processingDate);
        sb.append(", ").append(amount);
        sb.append(", ").append(isWithdraw);

        sb.append(")");
        return sb.toString();
    }
}
