/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.accountWs.database.tables.daos;


import com.revolut.test.backend.accountWs.database.tables.Operation;
import com.revolut.test.backend.accountWs.database.tables.records.OperationRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperationDao extends DAOImpl<OperationRecord, com.revolut.test.backend.accountWs.database.tables.pojos.Operation, Integer> {

    /**
     * Create a new OperationDao without any configuration
     */
    public OperationDao() {
        super(Operation.OPERATION, com.revolut.test.backend.accountWs.database.tables.pojos.Operation.class);
    }

    /**
     * Create a new OperationDao with an attached configuration
     */
    public OperationDao(Configuration configuration) {
        super(Operation.OPERATION, com.revolut.test.backend.accountWs.database.tables.pojos.Operation.class, configuration);
    }

    @Override
    public Integer getId(com.revolut.test.backend.accountWs.database.tables.pojos.Operation object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Operation.OPERATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchById(Integer... values) {
        return fetch(Operation.OPERATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.revolut.test.backend.accountWs.database.tables.pojos.Operation fetchOneById(Integer value) {
        return fetchOne(Operation.OPERATION.ID, value);
    }

    /**
     * Fetch records that have <code>account_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchRangeOfAccountId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Operation.OPERATION.ACCOUNT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_id IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchByAccountId(String... values) {
        return fetch(Operation.OPERATION.ACCOUNT_ID, values);
    }

    /**
     * Fetch records that have <code>processing_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchRangeOfProcessingDate(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Operation.OPERATION.PROCESSING_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>processing_date IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchByProcessingDate(Timestamp... values) {
        return fetch(Operation.OPERATION.PROCESSING_DATE, values);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchRangeOfAmount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Operation.OPERATION.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchByAmount(Integer... values) {
        return fetch(Operation.OPERATION.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>is_withdraw BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchRangeOfIsWithdraw(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Operation.OPERATION.IS_WITHDRAW, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_withdraw IN (values)</code>
     */
    public List<com.revolut.test.backend.accountWs.database.tables.pojos.Operation> fetchByIsWithdraw(Byte... values) {
        return fetch(Operation.OPERATION.IS_WITHDRAW, values);
    }
}
